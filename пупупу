import hashlib

def hash_triangle(triangle):
    """Создает хэш для треугольника."""
    triangle_str = f"{triangle[0]}-{triangle[1]}-{triangle[2]}"
    return hashlib.sha256(triangle_str.encode()).hexdigest()

def delaunay_triangulation(input_points):
    """Реализует алгоритм Делоне для множества точек."""
    # Создание супертреугольника
    min_x = min(p[0] for p in input_points)
    max_x = max(p[0] for p in input_points)
    min_y = min(p[1] for p in input_points)
    max_y = max(p[1] for p in input_points)

    delta = max(max_x - min_x, max_y - min_y)
    super_triangle = [
        (min_x - 2 * delta, min_y - delta),
        (max_x + 2 * delta, min_y - delta),
        (min_x + (max_x - min_x) / 2, max_y + 2 * delta)
    ]

    # Инициализация с супертреугольником
    triangulation = [tuple(super_triangle)]
    triangulation_hashes = {hash_triangle(super_triangle)}

    plt.ion()
    visualize(input_points, triangulation, pause=1.0)

    for current_point in input_points:
        invalid_tris = []

        # Вычисляем "плохие" треугольники
        for tri in triangulation:
            if check_point_in_circle(current_point, *tri):
                invalid_tris.append(tri)

        # Определяем границы образовавшегося многоугольника
        boundary_edges = []
        for tri in invalid_tris:
            for edge in [(tri[0], tri[1]), (tri[1], tri[2]), (tri[2], tri[0])]:
                if edge[::-1] in boundary_edges:
                    boundary_edges.remove(edge[::-1])
                elif edge not in boundary_edges:
                    boundary_edges.append(edge)

        # Убираем плохие треугольники
        triangulation = [tri for tri in triangulation if tri not in invalid_tris]

        # Добавляем новые треугольники, образованные текущей точкой
        for edge in boundary_edges:
            new_triangle = (edge[0], edge[1], current_point)
            triangle_hash = hash_triangle(new_triangle)
            if triangle_hash not in triangulation_hashes:
                triangulation.append(new_triangle)
                triangulation_hashes.add(triangle_hash)

        visualize(input_points, triangulation)

    # Убираем треугольники, связанные с вершинами супертреугольника
    vertices_to_remove = set(super_triangle)
    final_triangulation = [
        tri for tri in triangulation
        if not any(vertex in vertices_to_remove for vertex in tri)
    ]

    visualize(input_points, final_triangulation, final=True, pause=1.0)
    plt.ioff()
    plt.show()

    return final_triangulation
# Тестовый пример
if __name__ == "__main__":
    # Генерация случайных точек
    random.seed(42)
    num_points = 5
    test_points = [(random.uniform(0, 10), random.uniform(0, 10)) for _ in range(num_points)]

    output = delaunay_triangulation(test_points)
    print("Результирующие треугольники:")
    for tri in output:
        print(tri)
