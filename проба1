import numpy as np
import matplotlib.pyplot as plt
import matplotlib.tri as tri

import numpy as np

def is_delaunay(triangles, points):
    """
    Проверяет, является ли текущая триангуляция Делоне.
    
    :param triangles: Список индексов треугольников
    :param points: Список координат точек
    :return: True, если триангуляция Делоне, иначе False
    """
    for t in triangles:
        # Получаем координаты вершин треугольника
        p1, p2, p3 = points[t[0]], points[t[1]], points[t[2]]
        
        # Вычисляем центр и радиус описанной окружности треугольника
        circumcenter, circumradius = circumcircle(p1, p2, p3)
        
        # Проверяем, что все другие точки не лежат внутри описанной окружности
        for i, pt in enumerate(points):
            if i not in t and np.linalg.norm(pt - circumcenter) < circumradius:
                return False  # Если точка лежит внутри окружности, триангуляция не является Делоне
    return True  # Все проверки пройдены, триангуляция является Делоне


def circumcircle(p1, p2, p3):
    """
    Вычисляет центр и радиус описанной окружности для треугольника, заданного точками p1, p2, p3.
    
    :param p1, p2, p3: Координаты вершин треугольника
    :return: Центр окружности и её радиус
    """
    # Вычисляем детерминант для определения центра окружности
    D = 2 * (p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1]))
    
    # Вычисляем координаты центра окружности (ux, uy)
    ux = ((p1[0]**2 + p1[1]**2) * (p2[1] - p3[1]) + 
          (p2[0]**2 + p2[1]**2) * (p3[1] - p1[1]) + 
          (p3[0]**2 + p3[1]**2) * (p1[1] - p2[1])) / D
          
    uy = ((p1[0]**2 + p1[1]**2) * (p3[0] - p2[0]) + 
          (p2[0]**2 + p2[1]**2) * (p1[0] - p3[0]) + 
          (p3[0]**2 + p3[1]**2) * (p2[0] - p1[0])) / D
    
    # Центр окружности
    circumcenter = np.array([ux, uy])
    
    # Радиус окружности (расстояние от центра до любой из вершин)
    circumradius = np.linalg.norm(p1 - circumcenter)
    
    return circumcenter, circumradius


# Поворот треугольников
def flip(triangles, points, t):
    p1, p2, p3 = points[t[0]], points[t[1]], points[t[2]]
    for i in range(len(triangles)):
        if i == t:
            continue
        t2 = triangles[i]
        if (t[0] in t2 and t[1] in t2) or (t[1] in t2 and t[2] in t2) or (t[2] in t2 and t[0] in t2):
            common = list(set(t) & set(t2))
            common_point = list(set([t[0], t[1], t[2]]) - set(common))[0]
            new_triangle1 = [common[0], common[1], common_point]
            new_triangle2 = [common[1], common[2], common_point]
            triangles[i] = new_triangle1
            triangles.append(new_triangle2)
            triangles.remove(t)
            return True
    return False

# Начальная триангуляция
def initial_triangulation(points):
    tri_obj = tri.Triangulation(points[:,0], points[:,1])
    return tri_obj.triangles.tolist()

# Алгоритм Делоне
def delaunay_algorithm(points):
    triangles = initial_triangulation(points)
    while not is_delaunay(triangles, points):
        for t in triangles:
            if not is_delaunay([t], points):
                flip(triangles, points, t)
                break
    return triangles

# Визуализация
def plot_triangulation(points, triangles):
    plt.figure(figsize=(8, 6))
    plt.triplot(points[:,0], points[:,1], triangles, 'go-', lw=1)
    plt.plot(points[:, 0], points[:, 1], 'bo', markersize=6)
    plt.show()

# Пример
points = np.random.rand(10, 2)  # случайные точки
triangles = delaunay_algorithm(points)
plot_triangulation(points, triangles)
